#
# 2022.06.13.
#
# Created by 김성찬.
#

#
# 01 파이썬답게 생각하기
#

title = '''01 사용 중인 파이썬의 버전을 알아두라'''
print(title)

import sys
print(sys.version_info)
print(sys.version)

# 기억해야 할 내용
# - 파이썬 3는 파이썬 최신 버전이며 현재 가장 잘 지원되고 있다.
# - 시스템에 있는 파이썬 실행 파일이 원하는 버전인지 확인하라.
# - 파이썬 2는 사용하지 말라.

title = '''02 PEP 8 스타일 가이드를 따르라'''
print(title)

warning = '''여기 다시 공부하시오'''
print(warning)

# 기억해야 할 내용
# - 파이썬 코드를 작성할 때는 항상 파이썬 개선 제안 #8(PEP 8) 스타일 가이드를 따르라.
# - 큰 파이썬 커뮤니티와 공통된 스타일을 공유하면 다른 사람과 협력할 때 도움이 된다.
# - 일관성 있는 스타일을 사용하면 나중에 자신이 작성한 코드를 직접 수정할 때도 더 수월해진다.

title = '''03 bytes와 str의 차이를 알아두라'''
print(title)

a = b'h\x65llo'
print(list(a))
print(a)

print(warning)

# 기억해야 할 내용
# - bytes에는 8비트 값의 시퀀스가 들어 있고, str에는 유니코드 코드 포인트의 시퀀스가 들어 있다.
# - 처리할 입력이 원하는 문자 시퀀스(8비트 값, UTF-8로 인코딩된 문자열, 유니코드 코드 포인트들)인지
#   확실히 하려면 도우미 함수를 사용하라.
# - bytes와 str 인스턴스를 (>, ==, +, %와 같은) 연산자에 섞어서 사용할 수 없다.
# - 이진 데이터를 파일에서 읽거나 파일에 쓰고 싶으면 항상 이진 모드('rb'나 'wb')로 파일을 열어라.
# - 유니코드 데이터를 파일에서 읽거나 파일에 쓰고 싶을 때는 시스템 디폴트 인코딩에 주의하라.
#   인코딩 차이로 놀라고 싶지 않으면 open에 encoding 파라미터를 명시적으로 전달하라.

title = '''04 C 스타일 형식 문자열을 str.format과 쓰기보다는 f-문자열을 통한 인터폴레이션을 사용하라'''
print(title)

print(warning)

# 기억해야 할 내용
# - % 연산자를 사용하는 C 스타일 형식화 문자열은 여러 가지 단점과 번잡성이라는 문제가 있다.
# - str.format 메서드는 형식 지정자 미니 언어에서 유용한 개념 몇 가지를 새로 제공했다.
#   하지만 이를 제외하면 str.format 메서드도 C 스타일 형식 문자열의 문제점을 그대로 가지고 있으므로,
#   가능하면 str.format 사용을 피해야 한다.
# - f-문자열은 값을 문자열 안에 넣는 새로운 구문으로, C 스타일 형식화 문자열의 가장 큰 문제점을 해결해준다.
# - f-문자열은 간결하지만, 위치 지정자 안에 임의의 파이썬 식을 직접 포함시킬 수 있으므로 매우 강력하다.

title = '''05 복잡한 식을 쓰는 대신 도우미 함수를 작성하라'''
print(title)

print(warning)

# 기억해야 할 내용
# - 파이썬 문법을 사용하면 아주 복잡하고 읽기 어려운 한 줄짜리 식을 쉽게 작성할 수 있다.
# - 복잡한 식을 도우미 함수로 옯겨라. 특히 같은 로직을 반복해 사용할 때는 도우미 함수를 꼭 사용하라.
# - 불(boolean) 연산자 or나 and를 식에 사용하는 것보다 if/else 식을 쓰는 편이 더 가독성이 좋다.

title = '''06 인덱스를 사용하는 대신 대입을 사용해 데이터를 언패킹하라'''
print(title)

